
local g = vim.g
local env_var  = require("environment").variable
local std_path = require("environment").std_path
local uv = vim.loop


-- Defines whether Gutentags should be enabled
g.gutentags_enabled = 0

-- Defines some advanced commands like
-- |GutentagsToggleEnabled| and |GutentagsUnlock|
g.gutentags_define_advanced_commands = 1

--  $GTAGSLABEL = 'native-pygments'
uv.os_setenv("GTAGSLABEL", "native")

if env_var.is_windows then
    uv.os_setenv("GTAGSCONF", "C:/utility_tools/share/gtags/gtags.conf")
else
    uv.os_setenv("GTAGSCONF", "/usr/local/share/gtags/gtags.conf")
end


-- tell gutentags where is project root directory
-- function gutentags_project_root_finder_hook_func(path)
--     return getcwd()
-- end
-- g.gutentags_project_root_finder = gutentags_project_root_finder_hook_func
g.gutentags_project_root = {".repo", ".root", ".project", "package.json"}

-- Specifies the name of the tag file to create. This will be appended to the project's root
g.gutentags_ctags_tagfile = '.tags'

-- Specifies a directory in which to create all the tags
g.gutentags_cache_dir = std_path.data .. env_var.path_sep .. "cache_tags"

module_table = {}
-- check if ctags is exist
if vim.fn.executable('ctags') == 1 then
    table.insert(module_table, "ctags")
end

-- check if gtags and gtags-cscope is exist
if vim.fn.executable('gtags') == 1 and vim.fn.executable('gtags-cscope') == 1 then
    table.insert(module_table, "gtags_cscope")
end
g.gutentags_modules = module_table

-- When set to 1, Gutentags will resolve any symlinks
g.gutentags_resolve_symlinks = 1

-- Specifies command(s) to use to list files
g.gutentags_file_list_command = "rg --files --no-hidden --no-ignore"

-- ctags parameters
g.gutentags_ctags_extra_args = {
    "-R",
    "--sort=foldcase",
    -- "--exclude=Build",
    -- "-excmd=combine",


    -- $ ctags --list-kinds=C
    -- d  macro definitions
    -- e  enumerators (values inside an enumeration)
    -- f  function definitions
    -- g  enumeration names
    -- h  included header files
    -- l  local variables [off]
    -- m  struct, and union members
    -- p  function prototypes [off]
    -- s  structure names
    -- t  typedefs
    -- u  union names
    -- v  variable definitions
    -- x  external and forward variable declarations [off]
    -- z  function parameters inside function definitions [off]
    -- L  goto labels [off]
    '--C-kinds=+pxzL',
    '--C++-kinds=+px',

    -- $ ctags --list-extras
    -- #TER NAME              ENABLED LANGUAGE FIXED DESCRIPTION
    -- -       anonymous         yes     NONE     no    Include tags for non-named objects like lambda
    -- -       subword           no      NONE     no    Include tags for subwords generated by splitting the original tag (only for ctags development)
    -- F       fileScope         yes     NONE     no    Include tags of file scope
    -- f       inputFile         no      NONE     no    Include an entry for the base file name of every input file
    -- g       guest             no      NONE     no    Include tags generated by guest parsers
    -- p       pseudo            yes     NONE     no    Include pseudo tags
    -- q       qualified         no      NONE     no    Include an extra class-qualified tag entry for each tag
    -- r       reference         no      NONE     no    Include reference tags
    -- s       subparser         yes     NONE     no    Include tags generated by subparsers
    -- -       funcmap           yes     QemuHX   no    Include mapping SQMP to C function name
    -- -       whitespaceSwapped yes     Robot    no    Include tags swapping whitespace and underscore chars
    '--extras=+fq',

    -- $ ctags --list-fields
    -- #TER NAME           ENABLED LANGUAGE         JSTYPE FIXED DESCRIPTION
    -- N       name           yes     NONE             s--    yes   tag name
    -- F       input          yes     NONE             s--    yes   input file
    -- P       pattern        yes     NONE             s-b    yes   pattern
    -- C       compact        no      NONE             s--    no    compact input line (used only in xref output)
    -- E       extras         no      NONE             s--    no    Extra tag type information
    -- K       NONE           no      NONE             s--    no    Kind of tag as full name
    -- R       NONE           no      NONE             s--    no    Marker (R or D) representing whether tag is definition or reference
    -- S       signature      no      NONE             s--    no    Signature of routine (e.g. prototype or parameter list)
    -- Z       scope          no      NONE             s--    no    Include the "scope:" key in scope field (use s) in tags output, scope name in xref output
    -- a       access         no      NONE             s--    no    Access (or export) of class members
    -- e       end            no      NONE             -i-    no    end lines of various items
    -- f       file           yes     NONE             --b    no    File-restricted scoping
    -- i       inherits       no      NONE             s-b    no    Inheritance information
    -- k       NONE           yes     NONE             s--    no    Kind of tag as a single ter
    -- l       language       no      NONE             s--    no    Language of input file containing tag
    -- m       implementation no      NONE             s--    no    Implementation information
    -- n       line           no      NONE             -i-    no    Line number of tag definition
    -- p       scopeKind      no      NONE             s--    no    Kind of scope as full name
    -- r       roles          no      NONE             s--    no    Roles
    -- s       NONE           yes     NONE             s--    no    Scope of tag definition (`p' can be used for printing its kind)
    -- t       typeref        yes     NONE             s--    no    Type and name of a variable or typedef
    -- x       xpath          no      NONE             s--    no    xpath for the tag
    -- z       kind           no      NONE             s--    no    Include the "kind:" key in kind field (use k or K) in tags output, kind full name in xref output
    -- -       properties     no      C                s--    no    properties (static, inline, mutable,...)
    -- -       captures       no      C++              s--    no    lambda capture list
    -- -       name           yes     C++              s--    no    aliased names
    -- -       properties     no      C++              s--    no    properties (static, inline, mutable,...)
    -- -       template       no      C++              s--    no    template parameters
    -- -       properties     no      CUDA             s--    no    properties (static, inline, mutable,...)
    -- -       assignment     yes     LdScript         s--    no    how a value is assigned to the symbol
    -- -       sectionMarker  no      Markdown         s--    no    character used for declaring section(#, ##, =, or -)
    -- -       version        no      Maven2           s--    no    version of artifact
    -- -       home           yes     Passwd           s--    no    home directory
    -- -       shell          yes     Passwd           s--    no    login shell
    -- -       decorators     no      Python           s--    no    decorators on functions and classes
    -- -       sectionMarker  no      ReStructuredText s--    no    character used for declaring section
    '--fields=+niazS',

    -- 使用 universal-ctags 的话需要下面这行，请反注释
    '--output-format=e-ctags',

}

--If set to 1, Gutentags will automatically add the
-- generated code database to Vim by running `:cs add`
-- (see |:cscope|).
-- Defaults to 1.
g.gutentags_auto_add_gtags_cscope = 1
